<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>
    <div class="video justify-content-center">
      <stack id="stackDemo01" class="flex-column video-container">
        <video
          class="flex-1 {{objectFitClass}}"
          poster='http://misc.aotu.io/booxood/mobile-video/cover_900x500.jpg'
          autoplay="false" onprepared="preparedfn" onstart="startfn" onpause="pausefn" onfinish="finishfn"
          onerror="errorfn" onseeking="seekingfn" onseeked="seekedfn" ontimeupdate="timeupdatefn" id="video"
          src='http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400'
          controls="false"
          muted="false"
        ></video>
        <div class="danmu-wrap">
          <div class="danmu-list" for="stack in danmuList">
            <text class="danmu" for="{{stack}}" style="{{$item.style}}">{{$item.text}}</text>
          </div>
        </div>
        <div class="video-control">
          <switch class="switch" checked="false" onchange="onMulchSwitched"></switch>
          <switch class="switch" checked="false" onchange="toggleDanmu"></switch>
        </div>
      </stack>
    </div>
  </div>
</template>

<script>
  import network from '@system.network'
  import Danmu from '../danmu'
  import fakerData from '../data'

  export default {
    private: {
      componentName: 'video',
      showmask: true,
      showicon: true,
      ignorenet: false,
      isFullScreen: false,
      showControls: true,
      drawComplete: false,
      danmuManager: null,
      danmuList: [[]],
      muted: false,
      stopDanmu: false,
      time: 0,
      objectFitValues: [
        "cover", "contain", "fill", "none", "scale-down"
      ],
      objectFitClass: 'cover'
    },
    onInit() {
      this.$page.setTitleBar({ text: 'Video' })
    },
    onShow() {
      this.danmuManager = new Danmu({
        width: this.$page.windowWidth,
        height: this.$page.windowHeight,
        data: fakerData
      })
      this.flashDanmu()
    },
    flashDanmu() {
      setInterval(() => {
        if (this.stopDanmu) {
          return
        }
        this.time += 16
        const newVal = this.danmuManager.flash(this.time / 1000, this.danmuList)
        if (newVal !== null) {
          this.danmuList = newVal
        }
        this.scrollDanmu()
      }, 16)
    },
    scrollDanmu() {
      this.danmuList.forEach((list, index) => {
        list.forEach((item, subIndex) => {
          item.left -= item.speed
          item.leftFullscreen -= item.speedFullscreen
          item.style = {
            transform: `translateX(${item.left}px)`
          }
          item.fullscreenStyle = {
            transform: `translateX(${item.leftFullscreen}px)`
          }
          this.danmuList[index][subIndex] = item
        })
      })
    },
    toggleDanmu() {
      this.stopDanmu = !this.stopDanmu
    },
    startVideo(e) {
      if (e.usenet) {
        // 非wifi情况下继续播放
        this.ignorenet = true
      }
      this.networkstatus('video')
    },
    onMulchSwitched(e) {
      if (this.isFullScreen) {
        this.$page.exitFullscreen()
      } else {
        this.$element('stackDemo01').requestFullscreen({ screenOrientation: "landscape" })
      }
      this.isFullScreen = !this.isFullScreen
    },
    networkstatus() {
      network.subscribe({
        callback: function (data) {
          if (data.type === 'wifi' || this.ignorenet) {
            this.$element('video').start()
            this.showmask = false
          } else {
            this.showmask = true
            this.$element('video').pause()
            this.showicon = false
          }
        }.bind(this)
      })
    }
  }
</script>

<style>
  .doc-page{
    flex: 1;
    flex-direction: column;
    background-color: #fbf9fe;
  }

  .page-title-wrap {
    padding-top: 50px;
    padding-bottom: 80px;
    justify-content: center;
  }
  .page-title{
    padding-top: 30px;
    padding-bottom: 30px;
    padding-left: 40px;
    padding-right: 40px;
    border-color: #bbbbbb;
    color: #bbbbbb;
    border-bottom-width: 2px;
  }

  .item-container {
    margin-bottom: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
    margin-top: 20px;
  }
  .item-content {
    flex-direction: column;
    background-color: #ffffff;
    padding: 30px;
    margin-bottom: 30px;
  }

  /* Flex */
  .flex-1{
    flex: 1;
  }
  .flex-column {
    flex-direction: column;
  }
  .justify-content-center{
    justify-content: center;
  }
.video-container {
  position: relative;
  width: 750px;
  height: 350px;
}

.danmu-wrap {
  height: 100%;
  width: 100%;
  background-color: transparent;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
}

.danmu-list {
  width: 100%;
}

.danmu-list .danmu {
  font-size: 36px;
  color: #fff;
  lines: 1;
  text-shadow: rgb(0, 0, 0) 1px 0px 1px, rgb(0, 0, 0) 0px 1px 1px, rgb(0, 0, 0) 0px -1px 1px, rgb(0, 0, 0) -1px 0px;
}

.video-control {
  justify-content: flex-start;
  align-items: flex-end;
  height: 100%;
}

.video {
  width: 750px;
  height: 400px;
}

.tip .continue {
  padding: 15px 30px;
  border: 1px solid #ffffff;
  margin-top: 30px;
  margin-bottom: 10px;
  color: #ffffff;
  border-radius: 30px;
}
</style>
